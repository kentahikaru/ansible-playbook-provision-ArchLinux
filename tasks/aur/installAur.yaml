---
- name: Make direcotry for aur installation
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/aur"
    state: directory
    mode: 0744

- name: Download and extract PKGBUILD
  ansible.builtin.unarchive:
    src: https://aur.archlinux.org/cgit/aur.git/snapshot/aurutils.tar.gz
    dest: "{{ ansible_user_dir }}/aur/"
    remote_src: true

- name: Read PKGBUILD
  ansible.builtin.slurp:
    src: "{{ ansible_user_dir }}/aur/aurutils/PKGBUILD"
  register: pkgbuild

- name: Get package version
  ansible.builtin.set_fact:
    pkgver: "{{ pkgbuild['content'] | b64decode | regex_findall('pkgver=[0-9][0-9].[0-9]') }}"

- name: Get package version
  ansible.builtin.set_fact:
    pkgver: "{{ pkgver | regex_findall('[0-9][0-9].[0-9]') }}"

- name: Debug
  ansible.builtin.debug:
    var: pkgver

- name: Get release number
  ansible.builtin.set_fact:
    pkgrel: "{{ pkgbuild['content'] | b64decode | regex_findall('pkgrel=[0-9]') }}"

- name: Get release number
  ansible.builtin.set_fact:
    pkgrel: "{{ pkgrel | regex_findall('[0-9]') }}"

- name: Debug
  ansible.builtin.debug:
    var: pkgrel

- name: Get depedencies
  ansible.builtin.set_fact:
    deps: "{{ pkgbuild['content'] | b64decode | regex_findall('\\ndepends=(.*?)\\)') }}"

- name: Debug
  ansible.builtin.debug:
    var: deps

- name: Get depedencies
  ansible.builtin.set_fact:
    deps: "{{ deps | regex_findall('[\\w-]+') }}"

- name: Debug
  ansible.builtin.debug:
    var: deps

- name: "Install depedencies"
  become: true
  community.general.pacman:
    name: "{{ item }}"
    state: present
  loop: "{{ deps }}"

- name: Get directory content
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/aur/aurutils/aurutils-{{ pkgver[0] }}-{{ pkgrel[0] }}-any.pkg.tar.zst"
  register: pkgstate

- name: Build package
  ansible.builtin.command: makepkg
  args:
    chdir: "{{ ansible_user_dir }}/aur/aurutils"
  when: not pkgstate.stat.exists
  changed_when: false

- name: Is aur installed?
  ansible.builtin.stat:
    path: /usr/bin/aur
  register: aurstate

- name: Install package
  become: true
  community.general.pacman:
    name: "{{ ansible_user_dir }}/aur/aurutils/aurutils-{{ pkgver[0] }}-{{ pkgrel[0] }}-any.pkg.tar.zst"
    # extra_args: "-U"
    state: present
  when: not aurstate.stat.exists

- name: Clean package
  ansible.builtin.command: makepkg -f --clean
  args:
    chdir: "{{ ansible_user_dir }}/aur/aurutils"
  when: not aurstate.stat.exists
  changed_when: false

- name: Create repo directory
  become: true
  ansible.builtin.file:
    path: "{{ repo_dir }}"
    state: directory
    owner: "{{ as_user }}"
    group: "{{ uid_guid }}"
    mode: 0755

- name: Does repo db already exists?
  ansible.builtin.stat:
    path: "{{ repo_dir }}/{{ repo_name }}"
  register: repodbstate

- name: Create repo db
  ansible.builtin.command: "repo-add -n {{ repo_dir }}/{{ repo_name }} {{ ansible_user_dir }}/aur/aurutils/aurutils-{{ pkgver[0] }}-{{ pkgrel[0] }}-any.pkg.tar.zst"
  when: not repodbstate.stat.exists
  register: repo_add_output
  changed_when: repo_add_output.stdout.find('No changes made to package database.') != -1

- name: Read pacman.conf
  become: true
  ansible.builtin.slurp:
    src: "/etc/pacman.conf"
  register: pacmanconf

- name: Is pacman.conf configured?
  ansible.builtin.set_fact:
    aurrepoconf: "{{ pacmanconf['content'] | b64decode | regex_findall('aur_repo') }}"

- name: Debug
  ansible.builtin.debug:
    var: aurrepoconf

- name: Debug
  ansible.builtin.debug:
    var: not aurrepoconf

- name: Insert configuration for aur repo into pacman.conf
  become: true
  ansible.builtin.blockinfile:
    path: /etc/pacman.conf
    marker: ""
    marker_begin: ""
    marker_end: ""
    block: |
      [aur_repo]
      SigLevel = Optional TrustAll
      Server = file:///opt/aur_repo
  when: not aurrepoconf

- name: Updating cache
  become: true
  community.general.pacman:
    update_cache: true
